{
  "name": "Base",
  "tagline": "Easily create complex node.js applications using plugins. base-methods ships with a handful of starter methods, like `set`, `get`, `del` and `use`, everything else is plugins!",
  "body": "# base [![NPM version](https://img.shields.io/npm/v/base.svg?style=flat)](https://www.npmjs.com/package/base) [![NPM downloads](https://img.shields.io/npm/dm/base.svg?style=flat)](https://npmjs.org/package/base) [![Build Status](https://img.shields.io/travis/node-base/base.svg?style=flat)](https://travis-ci.org/node-base/base)\r\n\r\n<p align=\"center\">\r\n<a href=\"https://github.com/node-base/base\">\r\n<img height=\"250\" width=\"250\" src=\"https://raw.githubusercontent.com/node-base/base/master/docs/logo.png\">\r\n</a>\r\n</p>\r\n\r\n## What is Base?\r\n\r\nBase is a framework for rapidly creating high quality node.js applications, using plugins like building blocks.\r\n\r\n### Guiding principles\r\n\r\nThe core team follows these principles to help guide API decisions:\r\n\r\n* **Compact API surface**: The smaller the API surface, the easier the library will be to learn and use.\r\n* **Easy to extend**: Implementors can use any npm package, and write plugins in pure JavaScript. If you're building complex apps, Base simplifies inheritance.\r\n* **Easy to test**: No special setup should be required to unit test `Base` or base plugins\r\n\r\n### Minimal API surface\r\n\r\n[The API](#api) was designed to provide only the minimum necessary functionality for creating a useful application, with or without [plugins](#plugins).\r\n\r\n**Base core**\r\n\r\nBase itself ships with only a handful of [useful methods](#api), such as:\r\n\r\n* `.set`: for setting values on the instance\r\n* `.get`: for getting values from the instance\r\n* `.has`: to check if a property exists on the instance\r\n* `.define`: for setting non-enumerable values on the instance\r\n* `.use`: for adding plugins\r\n\r\n**Be generic**\r\n\r\nWhen deciding on method to add or remove, we try to answer these questions:\r\n\r\n1. Will all or most Base applications need this method?\r\n2. Will this method encourage practices or enforce conventions that are beneficial to implementors?\r\n3. Can or should this be done in a plugin instead?\r\n\r\n### Composability\r\n\r\n**Plugin system**\r\n\r\nIt couldn't be easier to extend Base with any features or custom functionality you can think of.\r\n\r\nBase plugins are just functions that take an instance of `Base`:\r\n\r\n```js\r\nvar base = new Base();\r\n\r\nfunction plugin(base) {\r\n  // do plugin stuff, in pure JavaScript\r\n}\r\n// use the plugin\r\nbase.use(plugin);\r\n```\r\n\r\n**Inheritance**\r\n\r\nEasily inherit Base using `.extend`:\r\n\r\n```js\r\nvar Base = require('base');\r\n\r\nfunction MyApp() {\r\n  Base.call(this);\r\n}\r\nBase.extend(MyApp);\r\n\r\nvar app = new MyApp();\r\napp.set('a', 'b');\r\napp.get('a');\r\n//=> 'b';\r\n```\r\n\r\n**Inherit or instantiate with a namespace**\r\n\r\nBy default, the `.get`, `.set` and `.has` methods set and get values from the root of the `base` instance. You can customize this using the `.namespace` method exposed on the exported function. For example:\r\n\r\n```js\r\nvar Base = require('base');\r\n// get and set values on the `base.cache` object\r\nvar base = Base.namespace('cache');\r\n\r\nvar app = base();\r\napp.set('foo', 'bar');\r\nconsole.log(app.cache.foo);\r\n//=> 'bar'\r\n```\r\n\r\n## Install\r\n\r\nInstall with [npm](https://www.npmjs.com/):\r\n\r\n```sh\r\n$ npm install --save base\r\n```\r\n\r\n## API\r\n\r\n**Usage**\r\n\r\n```js\r\nvar Base = require('base');\r\nvar app = new Base();\r\napp.set('foo', 'bar');\r\nconsole.log(app.foo);\r\n//=> 'bar'\r\n```\r\n\r\n### [Base](index.js#L38)\r\n\r\nCreate an instance of `Base` with the given `config` and `options`.\r\n\r\n**Params**\r\n\r\n* `config` **{Object}**: If supplied, this object is passed to [cache-base](https://github.com/jonschlinkert/cache-base) to merge onto the the instance upon instantiation.\r\n* `options` **{Object}**: If supplied, this object is used to initialize the `base.options` object.\r\n\r\n**Example**\r\n\r\n```js\r\n// initialize with `config` and `options`\r\nvar app = new Base({isApp: true}, {abc: true});\r\napp.set('foo', 'bar');\r\n\r\n// values defined with the given `config` object will be on the root of the instance\r\nconsole.log(app.baz); //=> undefined\r\nconsole.log(app.foo); //=> 'bar'\r\n// or use `.get`\r\nconsole.log(app.get('isApp')); //=> true\r\nconsole.log(app.get('foo')); //=> 'bar'\r\n\r\n// values defined with the given `options` object will be on `app.options\r\nconsole.log(app.options.abc); //=> true\r\n```\r\n\r\n### [.is](index.js#L101)\r\n\r\nSet the given `name` on `app._name` and `app.is*` properties. Used for doing lookups in plugins.\r\n\r\n**Params**\r\n\r\n* `name` **{String}**\r\n* `returns` **{Boolean}**\r\n\r\n**Example**\r\n\r\n```js\r\napp.is('foo');\r\nconsole.log(app._name);\r\n//=> 'foo'\r\nconsole.log(app.isFoo);\r\n//=> true\r\napp.is('bar');\r\nconsole.log(app.isFoo);\r\n//=> true\r\nconsole.log(app.isBar);\r\n//=> true\r\nconsole.log(app._name);\r\n//=> 'bar'\r\n```\r\n\r\n### [.isRegistered](index.js#L139)\r\n\r\nReturns true if a plugin has already been registered on an instance.\r\n\r\nPlugin implementors are encouraged to use this first thing in a plugin\r\nto prevent the plugin from being called more than once on the same\r\ninstance.\r\n\r\n**Params**\r\n\r\n* `name` **{String}**: The plugin name.\r\n* `register` **{Boolean}**: If the plugin if not already registered, to record it as being registered pass `true` as the second argument.\r\n* `returns` **{Boolean}**: Returns true if a plugin is already registered.\r\n\r\n**Events**\r\n\r\n* `emits`: `plugin` Emits the name of the plugin being registered. Useful for unit tests, to ensure plugins are only registered once.\r\n\r\n**Example**\r\n\r\n```js\r\nvar base = new Base();\r\nbase.use(function(app) {\r\n  if (app.isRegistered('myPlugin')) return;\r\n  // do stuff to `app`\r\n});\r\n\r\n// to also record the plugin as being registered\r\nbase.use(function(app) {\r\n  if (app.isRegistered('myPlugin', true)) return;\r\n  // do stuff to `app`\r\n});\r\n```\r\n\r\n### [.use](index.js#L169)\r\n\r\nDefine a plugin function to be called immediately upon init. Plugins are chainable and expose the following arguments to the plugin function:\r\n\r\n* `app`: the current instance of `Base`\r\n* `base`: the [first ancestor instance](#base) of `Base`\r\n\r\n**Params**\r\n\r\n* `fn` **{Function}**: plugin function to call\r\n* `returns` **{Object}**: Returns the item instance for chaining.\r\n\r\n**Example**\r\n\r\n```js\r\nvar app = new Base()\r\n  .use(foo)\r\n  .use(bar)\r\n  .use(baz)\r\n```\r\n\r\n### [.define](index.js#L191)\r\n\r\nThe `.define` method is used for adding non-enumerable property on the instance. Dot-notation is **not supported** with `define`.\r\n\r\n**Params**\r\n\r\n* `key` **{String}**: The name of the property to define.\r\n* `value` **{any}**\r\n* `returns` **{Object}**: Returns the instance for chaining.\r\n\r\n**Example**\r\n\r\n```js\r\n// arbitrary `render` function using lodash `template`\r\napp.define('render', function(str, locals) {\r\n  return _.template(str)(locals);\r\n});\r\n```\r\n\r\n### [.mixin](index.js#L216)\r\n\r\nMix property `key` onto the Base prototype. If base is inherited using `Base.extend` this method will be overridden by a new `mixin` method that will only add properties to the prototype of the inheriting application.\r\n\r\n**Params**\r\n\r\n* `key` **{String}**\r\n* `val` **{Object|Array}**\r\n* `returns` **{Object}**: Returns the `base` instance for chaining.\r\n\r\n**Example**\r\n\r\n```js\r\napp.mixin('foo', function() {\r\n  // do stuff\r\n});\r\n```\r\n\r\n### [.base](index.js#L262)\r\n\r\nGetter/setter used when creating nested instances of `Base`, for storing a reference to the first ancestor instance. This works by setting an instance of `Base` on the `parent` property of a \"child\" instance. The `base` property defaults to the current instance if no `parent` property is defined.\r\n\r\n**Example**\r\n\r\n```js\r\n// create an instance of `Base`, this is our first (\"base\") instance\r\nvar first = new Base();\r\nfirst.foo = 'bar'; // arbitrary property, to make it easier to see what's happening later\r\n\r\n// create another instance\r\nvar second = new Base();\r\n// create a reference to the first instance (`first`)\r\nsecond.parent = first;\r\n\r\n// create another instance\r\nvar third = new Base();\r\n// create a reference to the previous instance (`second`)\r\n// repeat this pattern every time a \"child\" instance is created\r\nthird.parent = second;\r\n\r\n// we can always access the first instance using the `base` property\r\nconsole.log(first.base.foo);\r\n//=> 'bar'\r\nconsole.log(second.base.foo);\r\n//=> 'bar'\r\nconsole.log(third.base.foo);\r\n//=> 'bar'\r\n// and now you know how to get to third base ;)\r\n```\r\n\r\n### [#use](index.js#L287)\r\n\r\nStatic method for adding global plugin functions that will be added to an instance when created.\r\n\r\n**Params**\r\n\r\n* `fn` **{Function}**: Plugin function to use on each instance.\r\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\r\n\r\n**Example**\r\n\r\n```js\r\nBase.use(function(app) {\r\n  app.foo = 'bar';\r\n});\r\nvar app = new Base();\r\nconsole.log(app.foo);\r\n//=> 'bar'\r\n```\r\n\r\n### [#extend](index.js#L331)\r\n\r\nStatic method for inheriting the prototype and static methods of the `Base` class. This method greatly simplifies the process of creating inheritance-based applications. See [static-extend](https://github.com/jonschlinkert/static-extend) for more details.\r\n\r\n**Params**\r\n\r\n* `Ctor` **{Function}**: constructor to extend\r\n* `methods` **{Object}**: Optional prototype properties to mix in.\r\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\r\n\r\n**Example**\r\n\r\n```js\r\nvar extend = cu.extend(Parent);\r\nParent.extend(Child);\r\n\r\n// optional methods\r\nParent.extend(Child, {\r\n  foo: function() {},\r\n  bar: function() {}\r\n});\r\n```\r\n\r\n### [#mixin](index.js#L373)\r\n\r\nUsed for adding methods to the `Base` prototype, and/or to the prototype of child instances. When a mixin function returns a function, the returned function is pushed onto the `.mixins` array, making it available to be used on inheriting classes whenever `Base.mixins()` is called (e.g. `Base.mixins(Child)`).\r\n\r\n**Params**\r\n\r\n* `fn` **{Function}**: Function to call\r\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\r\n\r\n**Example**\r\n\r\n```js\r\nBase.mixin(function(proto) {\r\n  proto.foo = function(msg) {\r\n    return 'foo ' + msg;\r\n  };\r\n});\r\n```\r\n\r\n### [#mixins](index.js#L395)\r\n\r\nStatic method for running global mixin functions against a child constructor. Mixins must be registered before calling this method.\r\n\r\n**Params**\r\n\r\n* `Child` **{Function}**: Constructor function of a child class\r\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\r\n\r\n**Example**\r\n\r\n```js\r\nBase.extend(Child);\r\nBase.mixins(Child);\r\n```\r\n\r\n### [#inherit](index.js#L414)\r\n\r\nSimilar to `util.inherit`, but copies all static properties, prototype properties, and getters/setters from `Provider` to `Receiver`. See [class-utils](https://github.com/jonschlinkert/class-utils#inherit) for more details.\r\n\r\n**Params**\r\n\r\n* `Receiver` **{Function}**: Receiving (child) constructor\r\n* `Provider` **{Function}**: Providing (parent) constructor\r\n* `returns` **{Object}**: Returns the `Base` constructor for chaining\r\n\r\n**Example**\r\n\r\n```js\r\nBase.inherit(Foo, Bar);\r\n```\r\n\r\n## In the wild\r\n\r\nThe following node.js applications were built with `Base`:\r\n\r\n* [assemble](https://github.com/assemble/assemble)\r\n* [verb](https://github.com/verbose/verb)\r\n* [generate](https://github.com/generate/generate)\r\n* [scaffold](https://github.com/jonschlinkert/scaffold)\r\n* [boilerplate](https://github.com/jonschlinkert/boilerplate)\r\n\r\n## Test coverage\r\n\r\n```\r\nStatements   : 98.95% ( 94/95 )\r\nBranches     : 92.31% ( 24/26 )\r\nFunctions    : 100% ( 17/17 )\r\nLines        : 98.94% ( 93/94 )\r\n```\r\n\r\n## History\r\n\r\n**v0.11.0 - major breaking changes!**\r\n\r\n* Static `.use` and `.run` methods are now non-enumerable\r\n\r\n**v0.9.0 - major breaking changes!**\r\n\r\n* `.is` no longer takes a function, a string must be passed\r\n* all remaining `.debug` code has been removed\r\n* `app._namespace` was removed (related to `debug`)\r\n* `.plugin`, `.use`, and `.define` no longer emit events\r\n* `.assertPlugin` was removed\r\n* `.lazy` was removed\r\n\r\n## Related projects\r\n\r\nThere are a number of different plugins available for extending base. Let us know if you create your own!\r\n\r\n* [base-cwd](https://www.npmjs.com/package/base-cwd): Base plugin that adds a getter/setter for the current working directory. | [homepage](https://github.com/node-base/base-cwd \"Base plugin that adds a getter/setter for the current working directory.\")\r\n* [base-data](https://www.npmjs.com/package/base-data): adds a `data` method to base-methods. | [homepage](https://github.com/node-base/base-data \"adds a `data` method to base-methods.\")\r\n* [base-fs](https://www.npmjs.com/package/base-fs): base-methods plugin that adds vinyl-fs methods to your 'base' application for working with the file… [more](https://github.com/node-base/base-fs) | [homepage](https://github.com/node-base/base-fs \"base-methods plugin that adds vinyl-fs methods to your 'base' application for working with the file system, like src, dest, copy and symlink.\")\r\n* [base-generators](https://www.npmjs.com/package/base-generators): Adds project-generator support to your `base` application. | [homepage](https://github.com/node-base/base-generators \"Adds project-generator support to your `base` application.\")\r\n* [base-option](https://www.npmjs.com/package/base-option): Adds a few options methods to base, like `option`, `enable` and `disable`. See the readme… [more](https://github.com/node-base/base-option) | [homepage](https://github.com/node-base/base-option \"Adds a few options methods to base, like `option`, `enable` and `disable`. See the readme for the full API.\")\r\n* [base-pipeline](https://www.npmjs.com/package/base-pipeline): base-methods plugin that adds pipeline and plugin methods for dynamically composing streaming plugin pipelines. | [homepage](https://github.com/node-base/base-pipeline \"base-methods plugin that adds pipeline and plugin methods for dynamically composing streaming plugin pipelines.\")\r\n* [base-pkg](https://www.npmjs.com/package/base-pkg): Plugin for adding a `pkg` method that exposes pkg-store to your base application. | [homepage](https://github.com/node-base/base-pkg \"Plugin for adding a `pkg` method that exposes pkg-store to your base application.\")\r\n* [base-plugins](https://www.npmjs.com/package/base-plugins): Upgrade's plugin support in base applications to allow plugins to be called any time after… [more](https://github.com/node-base/base-plugins) | [homepage](https://github.com/node-base/base-plugins \"Upgrade's plugin support in base applications to allow plugins to be called any time after init.\")\r\n* [base-questions](https://www.npmjs.com/package/base-questions): Plugin for base-methods that adds methods for prompting the user and storing the answers on… [more](https://github.com/node-base/base-questions) | [homepage](https://github.com/node-base/base-questions \"Plugin for base-methods that adds methods for prompting the user and storing the answers on a project-by-project basis.\")\r\n* [base-store](https://www.npmjs.com/package/base-store): Plugin for getting and persisting config values with your base-methods application. Adds a 'store' object… [more](https://github.com/node-base/base-store) | [homepage](https://github.com/node-base/base-store \"Plugin for getting and persisting config values with your base-methods application. Adds a 'store' object that exposes all of the methods from the data-store library. Also now supports sub-stores!\")\r\n* [base-task](https://www.npmjs.com/package/base-task): base plugin that provides a very thin wrapper around [https://github.com/doowb/composer](https://github.com/doowb/composer) for adding task methods to… [more](https://github.com/node-base/base-task) | [homepage](https://github.com/node-base/base-task \"base plugin that provides a very thin wrapper around <https://github.com/doowb/composer> for adding task methods to your application.\")\r\n\r\n## Contributing\r\n\r\nThis document was generated by [verb-readme-generator](https://github.com/verbose/verb-readme-generator) (a [verb](https://github.com/verbose/verb) generator), please don't edit directly. Any changes to the readme must be made in [.verb.md](.verb.md). See [Building Docs](#building-docs).\r\n\r\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\r\n\r\nOr visit the [verb-readme-generator](https://github.com/verbose/verb-readme-generator) project to submit bug reports or pull requests for the readme layout template.\r\n\r\n## Building docs\r\n\r\n_(This document was generated by [verb-readme-generator](https://github.com/verbose/verb-readme-generator) (a [verb](https://github.com/verbose/verb) generator), please don't edit the readme directly. Any changes to the readme must be made in [.verb.md](.verb.md).)_\r\n\r\nGenerate readme and API documentation with [verb](https://github.com/verbose/verb):\r\n\r\n```sh\r\n$ npm install -g verb verb-readme-generator && verb\r\n```\r\n\r\n## Running tests\r\n\r\nInstall dev dependencies:\r\n\r\n```sh\r\n$ npm install -d && npm test\r\n```\r\n\r\n## Author\r\n\r\n**Jon Schlinkert**\r\n\r\n* [github/jonschlinkert](https://github.com/jonschlinkert)\r\n* [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n## License\r\n\r\nCopyright © 2016, [Jon Schlinkert](https://github.com/jonschlinkert).\r\nReleased under the [MIT license](https://github.com/node-base/base/blob/master/LICENSE).\r\n\r\n***\r\n\r\n_This file was generated by [verb](https://github.com/verbose/verb), v0.9.0, on June 23, 2016._",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}